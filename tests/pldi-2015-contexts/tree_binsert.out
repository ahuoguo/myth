(* Generated Thu Nov 13 04:55:21 2014 *)
let tree_binsert : tree -> nat -> tree =
  let rec f1 (t1:tree) : nat -> tree =
    fun (n1:nat) ->
      match t1 with
        | Leaf -> Node (Leaf, n1, Leaf)
        | Node (t2, n2, t3) -> (match compare n2 n1 with
                                  | LT -> Node (t2, n2, f1 t3 n1)
                                  | EQ -> t1
                                  | GT -> Node (f1 t2 n1, n2, t3))
  in
    f1
;;
